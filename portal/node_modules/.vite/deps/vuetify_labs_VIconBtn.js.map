{
  "version": 3,
  "sources": ["../../vuetify/src/labs/VIconBtn/VIconBtn.tsx"],
  "sourcesContent": ["// Styles\nimport './VIconBtn.scss'\n\n// Components\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\nimport { VIcon } from '@/components/VIcon'\nimport { VProgressCircular } from '@/components/VProgressCircular'\n\n// Composables\nimport { makeBorderProps, useBorder } from '@/composables/border'\nimport { makeComponentProps } from '@/composables/component'\nimport { makeElevationProps, useElevation } from '@/composables/elevation'\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { makeRoundedProps, useRounded } from '@/composables/rounded'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { genOverlays, makeVariantProps, useVariant } from '@/composables/variant'\n\n// Utilities\nimport { toDisplayString } from 'vue'\nimport { convertToUnit, genericComponent, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\nimport type { IconValue } from '@/composables/icons'\nimport type { Variant } from '@/composables/variant'\n\nexport type VIconBtnSlots = {\n  default: never\n  loader: never\n}\n\nexport type VIconBtnSizes = 'x-small' | 'small' | 'default' | 'large' | 'x-large'\n\nexport const makeVIconBtnProps = propsFactory({\n  active: {\n    type: Boolean,\n    default: undefined,\n  },\n  activeColor: String,\n  activeIcon: [String, Function, Object] as PropType<IconValue>,\n  activeVariant: String as PropType<Variant>,\n  baseVariant: {\n    type: String as PropType<Variant>,\n    default: 'tonal',\n  },\n  disabled: Boolean,\n  height: [Number, String],\n  width: [Number, String],\n  hideOverlay: Boolean,\n  icon: [String, Function, Object] as PropType<IconValue>,\n  iconColor: String,\n  iconSize: [Number, String] as PropType<VIconBtnSizes | number | string>,\n  iconSizes: {\n    type: Array as PropType<[VIconBtnSizes, number][]>,\n    default: () => ([\n      ['x-small', 10],\n      ['small', 16],\n      ['default', 24],\n      ['large', 28],\n      ['x-large', 32],\n    ]),\n  },\n  loading: Boolean,\n  opacity: [Number, String],\n  readonly: Boolean,\n  rotate: [Number, String],\n  size: {\n    type: [Number, String] as PropType<VIconBtnSizes | number | string>,\n    default: 'default',\n  },\n  sizes: {\n    type: Array as PropType<[VIconBtnSizes, number][]>,\n    default: () => ([\n      ['x-small', 16],\n      ['small', 24],\n      ['default', 40],\n      ['large', 48],\n      ['x-large', 56],\n    ]),\n  },\n  text: {\n    type: [String, Number, Boolean],\n    default: undefined,\n  },\n\n  ...makeBorderProps(),\n  ...makeComponentProps(),\n  ...makeElevationProps(),\n  ...makeRoundedProps(),\n  ...makeTagProps({ tag: 'button' }),\n  ...makeThemeProps(),\n  ...makeVariantProps({ variant: 'flat' } as const),\n}, 'VIconBtn')\n\nexport const VIconBtn = genericComponent<VIconBtnSlots>()({\n  name: 'VIconBtn',\n\n  props: makeVIconBtnProps(),\n\n  emits: {\n    'update:active': (value: boolean) => true,\n  },\n\n  setup (props, { attrs, slots }) {\n    const isActive = useProxiedModel(props, 'active')\n\n    const { themeClasses } = provideTheme(props)\n    const { borderClasses } = useBorder(props)\n    const { elevationClasses } = useElevation(props)\n    const { roundedClasses } = useRounded(props)\n\n    const { colorClasses, colorStyles, variantClasses } = useVariant(() => ({\n      color: (() => {\n        if (props.disabled) return undefined\n        if (!isActive.value) return props.color\n        // Use an inline fallback as opposed to setting a default color\n        // because non-toggle buttons are default flat whereas toggle\n        // buttons are default tonal and active flat. The exact use\n        // case for this is a toggle button with no active color.\n        return props.activeColor ?? props.color ?? 'surface-variant'\n      })(),\n      variant: (() => {\n        if (isActive.value === undefined) return props.variant\n        if (isActive.value) return props.activeVariant ?? props.variant\n        return props.baseVariant ?? props.variant\n      })(),\n    }))\n\n    const btnSizeMap = new Map(props.sizes)\n    const iconSizeMap = new Map(props.iconSizes)\n\n    function onClick () {\n      if (\n        props.disabled ||\n        props.readonly ||\n        isActive.value === undefined ||\n        (props.tag === 'a' && attrs.href)\n      ) return\n\n      isActive.value = !isActive.value\n    }\n\n    useRender(() => {\n      const icon = isActive.value ? props.activeIcon ?? props.icon : props.icon\n\n      const _btnSize = props.size as VIconBtnSizes\n      const hasNamedSize = btnSizeMap.has(_btnSize)\n      const btnSize = hasNamedSize ? btnSizeMap.get(_btnSize) : _btnSize\n      const btnHeight = props.height ?? btnSize\n      const btnWidth = props.width ?? btnSize\n\n      const _iconSize = props.iconSize as VIconBtnSizes\n      const hasNamedIconSize = iconSizeMap.has(_iconSize)\n\n      const iconSize = !_iconSize\n        ? hasNamedSize ? iconSizeMap.get(_btnSize) : iconSizeMap.get('default')\n        : hasNamedIconSize ? iconSizeMap.get(_iconSize) : _iconSize\n\n      const iconProps = { icon, size: iconSize, iconColor: props.iconColor, opacity: props.opacity }\n\n      return (\n        <props.tag\n          class={[\n            {\n              'v-icon-btn': true,\n              'v-icon-btn--active': isActive.value,\n              'v-icon-btn--disabled': props.disabled,\n              'v-icon-btn--loading': props.loading,\n              'v-icon-btn--readonly': props.readonly,\n              [`v-icon-btn--${props.size}`]: true,\n            },\n            themeClasses.value,\n            colorClasses.value,\n            borderClasses.value,\n            elevationClasses.value,\n            roundedClasses.value,\n            variantClasses.value,\n            props.class,\n          ]}\n          style={[\n            {\n              '--v-icon-btn-rotate': convertToUnit(props.rotate, 'deg'),\n              '--v-icon-btn-height': convertToUnit(btnHeight),\n              '--v-icon-btn-width': convertToUnit(btnWidth),\n            },\n            colorStyles.value,\n            props.style,\n          ]}\n          tabindex={ props.disabled || props.readonly ? -1 : 0 }\n          onClick={ onClick }\n        >\n          { genOverlays(!props.hideOverlay, 'v-icon-btn') }\n\n          <div class=\"v-icon-btn__content\" data-no-activator=\"\">\n            { (!slots.default && icon) ? (\n              <VIcon\n                key=\"content-icon\"\n                { ...iconProps }\n              />\n            ) : (\n              <VDefaultsProvider\n                key=\"content-defaults\"\n                disabled={ !icon }\n                defaults={{ VIcon: { ...iconProps } }}\n                v-slots={{\n                  default: () => slots.default?.() ?? toDisplayString(props.text),\n                }}\n              />\n            )}\n          </div>\n\n          { !!props.loading && (\n            <span key=\"loader\" class=\"v-icon-btn__loader\">\n              { slots.loader?.() ?? (\n                <VProgressCircular\n                  color={ typeof props.loading === 'boolean' ? undefined : props.loading }\n                  indeterminate=\"disable-shrink\"\n                  width=\"2\"\n                  size={ iconSize }\n                />\n              )}\n            </span>\n          )}\n        </props.tag>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VIconBtn = InstanceType<typeof VIconBtn>\n"],
  "mappings": "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",
  "names": ["makeVIconBtnProps", "propsFactory", "active", "type", "Boolean", "default", "undefined", "activeColor", "String", "activeIcon", "Function", "Object", "activeVariant", "baseVariant", "disabled", "height", "Number", "width", "hideOverlay", "icon", "iconColor", "iconSize", "iconSizes", "Array", "loading", "opacity", "readonly", "rotate", "size", "sizes", "text", "makeBorderProps", "makeComponentProps", "makeElevationProps", "makeRoundedProps", "makeTagProps", "tag", "makeThemeProps", "makeVariantProps", "variant", "VIconBtn", "genericComponent", "name", "props", "emits", "value", "setup", "_ref", "attrs", "slots", "isActive", "useProxiedModel", "themeClasses", "provideTheme", "borderClasses", "useBorder", "elevationClasses", "useElevation", "roundedClasses", "useRounded", "colorClasses", "colorStyles", "variantClasses", "useVariant", "color", "btnSizeMap", "Map", "iconSizeMap", "onClick", "href", "useRender", "_btnSize", "hasNamedSize", "has", "btnSize", "get", "btnHeight", "btnWidth", "_iconSize", "hasNamedIconSize", "iconProps", "_createVNode", "class", "convertToUnit", "style", "genOverlays", "VIcon", "_mergeProps", "VDefaultsProvider", "toDisplayString", "loader", "VProgressCircular"]
}
