import {
  VProgressCircular
} from "./chunk-WYWLHF7S.js";
import "./chunk-FT6JG2RL.js";
import {
  makeElevationProps,
  useElevation
} from "./chunk-PELT2XPC.js";
import {
  genOverlays,
  makeBorderProps,
  makeVariantProps,
  useBorder,
  useVariant
} from "./chunk-YI55MAJD.js";
import {
  VDefaultsProvider
} from "./chunk-2XGTLDD2.js";
import {
  makeRoundedProps,
  useRounded
} from "./chunk-HA2FGWA2.js";
import "./chunk-2I5HTFRT.js";
import {
  VIcon
} from "./chunk-SDNZK6PM.js";
import {
  makeTagProps
} from "./chunk-VDN3MGCM.js";
import "./chunk-NUEPCD5P.js";
import {
  useProxiedModel
} from "./chunk-5I3W4OQR.js";
import "./chunk-P4ED33XC.js";
import {
  makeThemeProps,
  provideTheme
} from "./chunk-K7PGCACK.js";
import {
  convertToUnit,
  genericComponent,
  makeComponentProps,
  propsFactory,
  useRender
} from "./chunk-6APIXCTI.js";
import {
  createVNode,
  mergeProps,
  toDisplayString
} from "./chunk-U3LI7FBV.js";
import "./chunk-PZ5AY32C.js";

// node_modules/vuetify/lib/labs/VIconBtn/VIconBtn.js
import "C:/AlumniLink/portal/node_modules/vuetify/lib/labs/VIconBtn/VIconBtn.css";
var makeVIconBtnProps = propsFactory({
  active: {
    type: Boolean,
    default: void 0
  },
  activeColor: String,
  activeIcon: [String, Function, Object],
  activeVariant: String,
  baseVariant: {
    type: String,
    default: "tonal"
  },
  disabled: Boolean,
  height: [Number, String],
  width: [Number, String],
  hideOverlay: Boolean,
  icon: [String, Function, Object],
  iconColor: String,
  iconSize: [Number, String],
  iconSizes: {
    type: Array,
    default: () => [["x-small", 10], ["small", 16], ["default", 24], ["large", 28], ["x-large", 32]]
  },
  loading: Boolean,
  opacity: [Number, String],
  readonly: Boolean,
  rotate: [Number, String],
  size: {
    type: [Number, String],
    default: "default"
  },
  sizes: {
    type: Array,
    default: () => [["x-small", 16], ["small", 24], ["default", 40], ["large", 48], ["x-large", 56]]
  },
  text: {
    type: [String, Number, Boolean],
    default: void 0
  },
  ...makeBorderProps(),
  ...makeComponentProps(),
  ...makeElevationProps(),
  ...makeRoundedProps(),
  ...makeTagProps({
    tag: "button"
  }),
  ...makeThemeProps(),
  ...makeVariantProps({
    variant: "flat"
  })
}, "VIconBtn");
var VIconBtn = genericComponent()({
  name: "VIconBtn",
  props: makeVIconBtnProps(),
  emits: {
    "update:active": (value) => true
  },
  setup(props, _ref) {
    let {
      attrs,
      slots
    } = _ref;
    const isActive = useProxiedModel(props, "active");
    const {
      themeClasses
    } = provideTheme(props);
    const {
      borderClasses
    } = useBorder(props);
    const {
      elevationClasses
    } = useElevation(props);
    const {
      roundedClasses
    } = useRounded(props);
    const {
      colorClasses,
      colorStyles,
      variantClasses
    } = useVariant(() => ({
      color: (() => {
        if (props.disabled) return void 0;
        if (!isActive.value) return props.color;
        return props.activeColor ?? props.color ?? "surface-variant";
      })(),
      variant: (() => {
        if (isActive.value === void 0) return props.variant;
        if (isActive.value) return props.activeVariant ?? props.variant;
        return props.baseVariant ?? props.variant;
      })()
    }));
    const btnSizeMap = new Map(props.sizes);
    const iconSizeMap = new Map(props.iconSizes);
    function onClick() {
      if (props.disabled || props.readonly || isActive.value === void 0 || props.tag === "a" && attrs.href) return;
      isActive.value = !isActive.value;
    }
    useRender(() => {
      const icon = isActive.value ? props.activeIcon ?? props.icon : props.icon;
      const _btnSize = props.size;
      const hasNamedSize = btnSizeMap.has(_btnSize);
      const btnSize = hasNamedSize ? btnSizeMap.get(_btnSize) : _btnSize;
      const btnHeight = props.height ?? btnSize;
      const btnWidth = props.width ?? btnSize;
      const _iconSize = props.iconSize;
      const hasNamedIconSize = iconSizeMap.has(_iconSize);
      const iconSize = !_iconSize ? hasNamedSize ? iconSizeMap.get(_btnSize) : iconSizeMap.get("default") : hasNamedIconSize ? iconSizeMap.get(_iconSize) : _iconSize;
      const iconProps = {
        icon,
        size: iconSize,
        iconColor: props.iconColor,
        opacity: props.opacity
      };
      return createVNode(props.tag, {
        "class": [{
          "v-icon-btn": true,
          "v-icon-btn--active": isActive.value,
          "v-icon-btn--disabled": props.disabled,
          "v-icon-btn--loading": props.loading,
          "v-icon-btn--readonly": props.readonly,
          [`v-icon-btn--${props.size}`]: true
        }, themeClasses.value, colorClasses.value, borderClasses.value, elevationClasses.value, roundedClasses.value, variantClasses.value, props.class],
        "style": [{
          "--v-icon-btn-rotate": convertToUnit(props.rotate, "deg"),
          "--v-icon-btn-height": convertToUnit(btnHeight),
          "--v-icon-btn-width": convertToUnit(btnWidth)
        }, colorStyles.value, props.style],
        "tabindex": props.disabled || props.readonly ? -1 : 0,
        "onClick": onClick
      }, {
        default: () => {
          var _a;
          return [genOverlays(!props.hideOverlay, "v-icon-btn"), createVNode("div", {
            "class": "v-icon-btn__content",
            "data-no-activator": ""
          }, [!slots.default && icon ? createVNode(VIcon, mergeProps({
            "key": "content-icon"
          }, iconProps), null) : createVNode(VDefaultsProvider, {
            "key": "content-defaults",
            "disabled": !icon,
            "defaults": {
              VIcon: {
                ...iconProps
              }
            }
          }, {
            default: () => {
              var _a2;
              return ((_a2 = slots.default) == null ? void 0 : _a2.call(slots)) ?? toDisplayString(props.text);
            }
          })]), !!props.loading && createVNode("span", {
            "key": "loader",
            "class": "v-icon-btn__loader"
          }, [((_a = slots.loader) == null ? void 0 : _a.call(slots)) ?? createVNode(VProgressCircular, {
            "color": typeof props.loading === "boolean" ? void 0 : props.loading,
            "indeterminate": "disable-shrink",
            "width": "2",
            "size": iconSize
          }, null)])];
        }
      });
    });
    return {};
  }
});
export {
  VIconBtn
};
//# sourceMappingURL=vuetify_labs_VIconBtn.js.map
